* evil multi edit
- use visual mode to select text
- press *R*, it will mark all the matches
- start edit one match, NOTE, needs to use insert mode to edit, normal mode edit
  is not reflected to all matches
* evil multi-cursor
** one way
- in normal mode, go to place desired and press *gzz*
- this will add one extra cursor (along with your actual cursor)
- repeat this for all the place you want add cursor
- get into insert mode to start multi-cursor action

** second way
- select candidate using visual mode
- press *gzm* and multiple cursors will be created for all the matches
- get into insert mode to start multi-cursor action
* make term-mode play nice with evil mode
#+BEGIN_SRC elisp
(defun enter-evil-normal()
  (interactive)
  (evil-normal-state))

(defun setup-my-term-mode()
  (setq-local global-hl-line-mode nil)
  (define-key term-raw-map (kbd "<escape>") 'enter-evil-normal)
  ;; (term-line-mode)
)

(evil-define-key 'normal term-raw-map "p" 'term-paste)
(evil-define-key 'normal term-raw-map "i" 'evil-emacs-state)

#+END_SRC
* useful things
in visual mode, *gr* will evaulate the region
 # :n  "gr" #'+eval:region
 # :n  "gR" #'+eval/buffer
* defadvice
(defadvice switch-to-buffer (before existing-buffer
                             activate compile)
  "When interactive, switch to existing buffers only."
  (interactive "b"))

  Let's look at this closely. The function defadvice creates a new piece of
  advice. Its first argument is the (unquoted) name of the existing function
  being advised—in this case, switch-to-buffer. Next comes a specially formatted
  list. Its first element—in this case, before—tells whether this is "before" or
  "after" advice. (Another type of advice, called "around," lets you embed a
  call to the advised function inside the advice code.) Next comes the name of
  this piece of advice; I named it existing-buffer. The name can be used later
  if you want to remove or modify the advice. Next come some keywords: activate
  means that this advice should be active as soon as it's defined (it's possible
  to define advice but leave it inactive); and compile means that the advice
  code should be "byte-compiled" for speed (see Chapter 5).
* misc
- *how-many* will return number of matches
- *keep-lines* will only keep lines match pattern
- *flush-lines* will delete lines match pattern
- follow-mode
* quickly toggle between two windows with ace-window
https://oremacs.com/2015/03/06/ace-window-toggle/
basically use *SPC w w n*
* put sth surround by function call
use *evil-surround* package
- select text in visual mode
- press *Sf*
- enter function name in mini-buffer
* gpg use

;;; gpg 的命令用法
;;  对称加密
gpg -c message.txt # 对 message.txt 文件进行加密，会提示输入密码，加密后的内容存到 message.txt.gpg文件中
解密过程
gpg -d message.txt.gpg >d.txt 解密的文件存到d.txt中
gpg  message.txt.gpg  解密的文件存到message.txt中

非对称加密
公钥的作用：别人用来给你发用你公钥加密的信息＆别人用你的公钥验证你的签名(这个签名用你的私钥生成的，任何人都可以用你的公钥来验证这个签名是不是你签的,以此能确定这个内容确实是你发的)
私钥的作用：你用来创建签名(用你自己的私钥)＆解密别人发给你的信息的(这个信息是别人用你的公钥进行加密的，只有你的私钥能解开)
具体而言，A要想发送加密信息到B，则：
　　A有A的签名私钥和B的加密公匙
　　B有A的签名公匙和B的加密私钥

生成公钥私钥
gpg --gen-key其间会让输入用户名 邮箱等,可以用不同的邮箱来代表公钥私钥

gpg --list-keys #查看公钥
gpg --list-secret-keys # 查看私钥
导出公钥
gpg --export -a mailorname >pub.key #-a 表示ascii码可打印形式 mailorname 为刚才输入的用户名与邮箱
导出私钥
gpg --export-secret-keys -a mailorname>pri.key

导入  公钥或私钥
gpg --import file.key


gpg -ea -r jixiuf message.txt
gpg -ear jixiuf message.txt
-e 表示加密，-a表示加密后为ascii可打印文件 生成的文件后缀名会为asc,否则为gpg二进制文件
-r 后跟接收者，加密的过程会用我的私钥和对方的公钥进行加密，加密后的文件只有对方的私钥可以解密

解密 直接
gpg message.txt.asc
gpg message.txt.gpg
或
gpg -d message.txt.gpg >d.txt 解密的文件存到d.txt中


签名
　　为避免别人宣称是你的风险，对所有你加密的东西签名是有用的。签名的意义在于两个方面：
Authenticity和Integrity。即数字签名可以证明数据是你发送的，并同时证明发送的内容未曾被别人修改过。
签名后的内容包含了原内容与一个签名

签名用你的私钥签， 别人用你的公钥来验证签名

gpg -s message.txt  会生成 message.txt.gpg 其中的内容为二进制
gpg --clearsign message.txt 会生成 message.txt.asc 其中的内容为ascii
-s 与 --clearsign 区别只是是否可读，通常发一个签名的邮件会用 --clearsign生成可读的文本
上述签名后的内容与签名混成了一个文件 可以用 gpg -d  message.txt.asc >a.txt 来去除签名，只保留原内容
也可以将签名与原内容分开 gpg --detach-sign message.txt 生成的签名单独放到一个文件中 message.txt.sig

验证签名 (验证签名之前需要先导入对方的公钥)  gpg --import file.key
gpg --verify message.txt.asc


签名且加密
将上面签名 与加密的命令合并即可
如 gpg -s -e -a -r jixiuf message.txt
如解密的时候会提示签名是否正确 gpg -d message.txt.asc>a message.txt

jixiuf@jxfhome ~ $ gpg -d fund.txt.asc >a                                                                             2
gpg: encrypted with 2048-bit RSA key, ID EF1EF652, created 2017-02-01
"jixiuf (jixiuf rsa keys) <jixiuf@qq.com>"
gpg: Signature made Thu Feb  2 15:13:10 2017 CST using RSA key ID 8BA69D04
gpg: Good signature from "jixiuf (jixiuf rsa keys) <jixiuf@qq.com>" [ultimate]

为什么要先签名后加密？
答：
　　看你发送的这个信息算不算秘密。算的话必须先签名后加密。
如果不算的话都行。但签名后加密比较好。除非要大家都能验证信息来源。
　　对于这个问题我们举个例子：
　　对于先加密后签名
　　ABC
　　A要把秘密给B。
　　那么
　　A有A的签名私钥和B的加密公匙
　　B有A的签名公匙和B的加密私钥

　　现在C加入。欺骗B说他也知道这个秘密（其实他不知道）
　　C把自己的签名公匙给B
　　因为C知道A的签名公匙，C可以把A给B的信息签名去掉再加上自己的签名
　　这个时候
　　B有用自己公匙加密的2条信息。明文是一样的。一个A签名一个C签名。B是无法知道谁真正知道秘密。
　　
　　如果是先签名后加密。
　　因为C不可能知道加密密匙，所以不能解密后改签名。所以就不能欺骗B说他也知道秘密。
　　
　　所以先加密后签名的缺陷不是C能知道秘密，而是B可能被欺骗。
　　因此签名都用在义务宣言上，表明自己说过的负责，不会不认帐。大家不会没事去冒名。（比如欠条）
　　如果对于别人会冒名的宣言，比如（出售机密，勒索等）如果签名没有被加密，B就可能向不知道秘密的人买秘密。
* gpg setting

Ref to [[https://wiki.archlinux.org/index.php/GnuPG#pinentry][archwiki]]:
- edit the gpg-agent configuration to allow loopback pinentry mode:
#+BEGIN_SRC shell
# ~/.gnupg/gpg-agent.conf
allow-loopback-pinentry
#+END_SRC

 if this is not possible, add the option to the configuration:
#+BEGIN_SRC shell
# ~/.gnupg/gpg.conf
pinentry-mode loopback
#+END_SRC

- Restart the gpg-agent process if it is running to let the change take effect.
-  include a commandline parameter to use loopback mode like so:
#+BEGIN_SRC shell
gpg --pinentry-mode loopback ...
#+END_SRC



